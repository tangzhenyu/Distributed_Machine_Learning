// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_dump_feature.proto

#ifndef PROTOBUF_service_5fdump_5ffeature_2eproto__INCLUDED
#define PROTOBUF_service_5fdump_5ffeature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace yidian {
namespace data {
namespace rawlog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto();
void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto();

class FeatureKV;
class BaseFeature;
class DocFeature;
class DumpFeature;

// ===================================================================

class FeatureKV : public ::google::protobuf::Message {
 public:
  FeatureKV();
  virtual ~FeatureKV();

  FeatureKV(const FeatureKV& from);

  inline FeatureKV& operator=(const FeatureKV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureKV& default_instance();

  void Swap(FeatureKV* other);

  // implements Message ----------------------------------------------

  FeatureKV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureKV& from);
  void MergeFrom(const FeatureKV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string k = 1;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 1;
  inline const ::std::string& k() const;
  inline void set_k(const ::std::string& value);
  inline void set_k(const char* value);
  inline void set_k(const char* value, size_t size);
  inline ::std::string* mutable_k();
  inline ::std::string* release_k();
  inline void set_allocated_k(::std::string* k);

  // optional double v = 2;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 2;
  inline double v() const;
  inline void set_v(double value);

  // @@protoc_insertion_point(class_scope:yidian.data.rawlog.FeatureKV)
 private:
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_v();
  inline void clear_has_v();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* k_;
  double v_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static FeatureKV* default_instance_;
};
// -------------------------------------------------------------------

class BaseFeature : public ::google::protobuf::Message {
 public:
  BaseFeature();
  virtual ~BaseFeature();

  BaseFeature(const BaseFeature& from);

  inline BaseFeature& operator=(const BaseFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseFeature& default_instance();

  void Swap(BaseFeature* other);

  // implements Message ----------------------------------------------

  BaseFeature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseFeature& from);
  void MergeFrom(const BaseFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::yidian::data::rawlog::FeatureKV& values(int index) const;
  inline ::yidian::data::rawlog::FeatureKV* mutable_values(int index);
  inline ::yidian::data::rawlog::FeatureKV* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:yidian.data.rawlog.BaseFeature)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static BaseFeature* default_instance_;
};
// -------------------------------------------------------------------

class DocFeature : public ::google::protobuf::Message {
 public:
  DocFeature();
  virtual ~DocFeature();

  DocFeature(const DocFeature& from);

  inline DocFeature& operator=(const DocFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocFeature& default_instance();

  void Swap(DocFeature* other);

  // implements Message ----------------------------------------------

  DocFeature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocFeature& from);
  void MergeFrom(const DocFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string doc_id = 1;
  inline bool has_doc_id() const;
  inline void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  inline const ::std::string& doc_id() const;
  inline void set_doc_id(const ::std::string& value);
  inline void set_doc_id(const char* value);
  inline void set_doc_id(const char* value, size_t size);
  inline ::std::string* mutable_doc_id();
  inline ::std::string* release_doc_id();
  inline void set_allocated_doc_id(::std::string* doc_id);

  // repeated int32 ids = 3;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 3;
  inline ::google::protobuf::int32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::int32 value);
  inline void add_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ids();

  // optional double score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline double score() const;
  inline void set_score(double value);

  // optional int32 times = 5;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 5;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional double gbdtscore = 6;
  inline bool has_gbdtscore() const;
  inline void clear_gbdtscore();
  static const int kGbdtscoreFieldNumber = 6;
  inline double gbdtscore() const;
  inline void set_gbdtscore(double value);

  // optional double y = 7;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline double y() const;
  inline void set_y(double value);

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 8;
  inline const ::yidian::data::rawlog::BaseFeature& features(int index) const;
  inline ::yidian::data::rawlog::BaseFeature* mutable_features(int index);
  inline ::yidian::data::rawlog::BaseFeature* add_features();
  inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >&
      features() const;
  inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:yidian.data.rawlog.DocFeature)
 private:
  inline void set_has_doc_id();
  inline void clear_has_doc_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_gbdtscore();
  inline void clear_has_gbdtscore();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* doc_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ids_;
  double score_;
  double gbdtscore_;
  double y_;
  ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature > features_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static DocFeature* default_instance_;
};
// -------------------------------------------------------------------

class DumpFeature : public ::google::protobuf::Message {
 public:
  DumpFeature();
  virtual ~DumpFeature();

  DumpFeature(const DumpFeature& from);

  inline DumpFeature& operator=(const DumpFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpFeature& default_instance();

  void Swap(DumpFeature* other);

  // implements Message ----------------------------------------------

  DumpFeature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DumpFeature& from);
  void MergeFrom(const DumpFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  inline int docs_size() const;
  inline void clear_docs();
  static const int kDocsFieldNumber = 2;
  inline const ::yidian::data::rawlog::DocFeature& docs(int index) const;
  inline ::yidian::data::rawlog::DocFeature* mutable_docs(int index);
  inline ::yidian::data::rawlog::DocFeature* add_docs();
  inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >&
      docs() const;
  inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >*
      mutable_docs();

  // optional int64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string buckets = 5;
  inline bool has_buckets() const;
  inline void clear_buckets();
  static const int kBucketsFieldNumber = 5;
  inline const ::std::string& buckets() const;
  inline void set_buckets(const ::std::string& value);
  inline void set_buckets(const char* value);
  inline void set_buckets(const char* value, size_t size);
  inline ::std::string* mutable_buckets();
  inline ::std::string* release_buckets();
  inline void set_allocated_buckets(::std::string* buckets);

  // optional string predicate_id = 7;
  inline bool has_predicate_id() const;
  inline void clear_predicate_id();
  static const int kPredicateIdFieldNumber = 7;
  inline const ::std::string& predicate_id() const;
  inline void set_predicate_id(const ::std::string& value);
  inline void set_predicate_id(const char* value);
  inline void set_predicate_id(const char* value, size_t size);
  inline ::std::string* mutable_predicate_id();
  inline ::std::string* release_predicate_id();
  inline void set_allocated_predicate_id(::std::string* predicate_id);

  // @@protoc_insertion_point(class_scope:yidian.data.rawlog.DumpFeature)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_buckets();
  inline void clear_has_buckets();
  inline void set_has_predicate_id();
  inline void clear_has_predicate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature > docs_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* version_;
  ::std::string* buckets_;
  ::std::string* predicate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static DumpFeature* default_instance_;
};
// ===================================================================


// ===================================================================

// FeatureKV

// optional string k = 1;
inline bool FeatureKV::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureKV::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureKV::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureKV::clear_k() {
  if (k_ != &::google::protobuf::internal::kEmptyString) {
    k_->clear();
  }
  clear_has_k();
}
inline const ::std::string& FeatureKV::k() const {
  return *k_;
}
inline void FeatureKV::set_k(const ::std::string& value) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::kEmptyString) {
    k_ = new ::std::string;
  }
  k_->assign(value);
}
inline void FeatureKV::set_k(const char* value) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::kEmptyString) {
    k_ = new ::std::string;
  }
  k_->assign(value);
}
inline void FeatureKV::set_k(const char* value, size_t size) {
  set_has_k();
  if (k_ == &::google::protobuf::internal::kEmptyString) {
    k_ = new ::std::string;
  }
  k_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeatureKV::mutable_k() {
  set_has_k();
  if (k_ == &::google::protobuf::internal::kEmptyString) {
    k_ = new ::std::string;
  }
  return k_;
}
inline ::std::string* FeatureKV::release_k() {
  clear_has_k();
  if (k_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = k_;
    k_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FeatureKV::set_allocated_k(::std::string* k) {
  if (k_ != &::google::protobuf::internal::kEmptyString) {
    delete k_;
  }
  if (k) {
    set_has_k();
    k_ = k;
  } else {
    clear_has_k();
    k_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double v = 2;
inline bool FeatureKV::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureKV::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureKV::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureKV::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double FeatureKV::v() const {
  return v_;
}
inline void FeatureKV::set_v(double value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// BaseFeature

// optional string name = 1;
inline bool BaseFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseFeature::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BaseFeature::name() const {
  return *name_;
}
inline void BaseFeature::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseFeature::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseFeature::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseFeature::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BaseFeature::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseFeature::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .yidian.data.rawlog.FeatureKV values = 2;
inline int BaseFeature::values_size() const {
  return values_.size();
}
inline void BaseFeature::clear_values() {
  values_.Clear();
}
inline const ::yidian::data::rawlog::FeatureKV& BaseFeature::values(int index) const {
  return values_.Get(index);
}
inline ::yidian::data::rawlog::FeatureKV* BaseFeature::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::yidian::data::rawlog::FeatureKV* BaseFeature::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >&
BaseFeature::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >*
BaseFeature::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// DocFeature

// optional string doc_id = 1;
inline bool DocFeature::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocFeature::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocFeature::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocFeature::clear_doc_id() {
  if (doc_id_ != &::google::protobuf::internal::kEmptyString) {
    doc_id_->clear();
  }
  clear_has_doc_id();
}
inline const ::std::string& DocFeature::doc_id() const {
  return *doc_id_;
}
inline void DocFeature::set_doc_id(const ::std::string& value) {
  set_has_doc_id();
  if (doc_id_ == &::google::protobuf::internal::kEmptyString) {
    doc_id_ = new ::std::string;
  }
  doc_id_->assign(value);
}
inline void DocFeature::set_doc_id(const char* value) {
  set_has_doc_id();
  if (doc_id_ == &::google::protobuf::internal::kEmptyString) {
    doc_id_ = new ::std::string;
  }
  doc_id_->assign(value);
}
inline void DocFeature::set_doc_id(const char* value, size_t size) {
  set_has_doc_id();
  if (doc_id_ == &::google::protobuf::internal::kEmptyString) {
    doc_id_ = new ::std::string;
  }
  doc_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DocFeature::mutable_doc_id() {
  set_has_doc_id();
  if (doc_id_ == &::google::protobuf::internal::kEmptyString) {
    doc_id_ = new ::std::string;
  }
  return doc_id_;
}
inline ::std::string* DocFeature::release_doc_id() {
  clear_has_doc_id();
  if (doc_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_id_;
    doc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DocFeature::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_id_;
  }
  if (doc_id) {
    set_has_doc_id();
    doc_id_ = doc_id;
  } else {
    clear_has_doc_id();
    doc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 ids = 3;
inline int DocFeature::ids_size() const {
  return ids_.size();
}
inline void DocFeature::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int32 DocFeature::ids(int index) const {
  return ids_.Get(index);
}
inline void DocFeature::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
}
inline void DocFeature::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocFeature::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocFeature::mutable_ids() {
  return &ids_;
}

// optional double score = 4;
inline bool DocFeature::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocFeature::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocFeature::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocFeature::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline double DocFeature::score() const {
  return score_;
}
inline void DocFeature::set_score(double value) {
  set_has_score();
  score_ = value;
}

// optional int32 times = 5;
inline bool DocFeature::has_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocFeature::set_has_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocFeature::clear_has_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocFeature::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 DocFeature::times() const {
  return times_;
}
inline void DocFeature::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional double gbdtscore = 6;
inline bool DocFeature::has_gbdtscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocFeature::set_has_gbdtscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocFeature::clear_has_gbdtscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocFeature::clear_gbdtscore() {
  gbdtscore_ = 0;
  clear_has_gbdtscore();
}
inline double DocFeature::gbdtscore() const {
  return gbdtscore_;
}
inline void DocFeature::set_gbdtscore(double value) {
  set_has_gbdtscore();
  gbdtscore_ = value;
}

// optional double y = 7;
inline bool DocFeature::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocFeature::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocFeature::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocFeature::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double DocFeature::y() const {
  return y_;
}
inline void DocFeature::set_y(double value) {
  set_has_y();
  y_ = value;
}

// repeated .yidian.data.rawlog.BaseFeature features = 8;
inline int DocFeature::features_size() const {
  return features_.size();
}
inline void DocFeature::clear_features() {
  features_.Clear();
}
inline const ::yidian::data::rawlog::BaseFeature& DocFeature::features(int index) const {
  return features_.Get(index);
}
inline ::yidian::data::rawlog::BaseFeature* DocFeature::mutable_features(int index) {
  return features_.Mutable(index);
}
inline ::yidian::data::rawlog::BaseFeature* DocFeature::add_features() {
  return features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >&
DocFeature::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >*
DocFeature::mutable_features() {
  return &features_;
}

// -------------------------------------------------------------------

// DumpFeature

// optional string user_id = 1;
inline bool DumpFeature::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpFeature::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpFeature::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpFeature::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& DumpFeature::user_id() const {
  return *user_id_;
}
inline void DumpFeature::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void DumpFeature::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void DumpFeature::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DumpFeature::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* DumpFeature::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DumpFeature::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .yidian.data.rawlog.DocFeature docs = 2;
inline int DumpFeature::docs_size() const {
  return docs_.size();
}
inline void DumpFeature::clear_docs() {
  docs_.Clear();
}
inline const ::yidian::data::rawlog::DocFeature& DumpFeature::docs(int index) const {
  return docs_.Get(index);
}
inline ::yidian::data::rawlog::DocFeature* DumpFeature::mutable_docs(int index) {
  return docs_.Mutable(index);
}
inline ::yidian::data::rawlog::DocFeature* DumpFeature::add_docs() {
  return docs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >&
DumpFeature::docs() const {
  return docs_;
}
inline ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >*
DumpFeature::mutable_docs() {
  return &docs_;
}

// optional int64 timestamp = 3;
inline bool DumpFeature::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DumpFeature::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DumpFeature::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DumpFeature::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 DumpFeature::timestamp() const {
  return timestamp_;
}
inline void DumpFeature::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional string version = 4;
inline bool DumpFeature::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DumpFeature::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DumpFeature::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DumpFeature::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DumpFeature::version() const {
  return *version_;
}
inline void DumpFeature::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void DumpFeature::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void DumpFeature::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DumpFeature::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* DumpFeature::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DumpFeature::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buckets = 5;
inline bool DumpFeature::has_buckets() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DumpFeature::set_has_buckets() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DumpFeature::clear_has_buckets() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DumpFeature::clear_buckets() {
  if (buckets_ != &::google::protobuf::internal::kEmptyString) {
    buckets_->clear();
  }
  clear_has_buckets();
}
inline const ::std::string& DumpFeature::buckets() const {
  return *buckets_;
}
inline void DumpFeature::set_buckets(const ::std::string& value) {
  set_has_buckets();
  if (buckets_ == &::google::protobuf::internal::kEmptyString) {
    buckets_ = new ::std::string;
  }
  buckets_->assign(value);
}
inline void DumpFeature::set_buckets(const char* value) {
  set_has_buckets();
  if (buckets_ == &::google::protobuf::internal::kEmptyString) {
    buckets_ = new ::std::string;
  }
  buckets_->assign(value);
}
inline void DumpFeature::set_buckets(const char* value, size_t size) {
  set_has_buckets();
  if (buckets_ == &::google::protobuf::internal::kEmptyString) {
    buckets_ = new ::std::string;
  }
  buckets_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DumpFeature::mutable_buckets() {
  set_has_buckets();
  if (buckets_ == &::google::protobuf::internal::kEmptyString) {
    buckets_ = new ::std::string;
  }
  return buckets_;
}
inline ::std::string* DumpFeature::release_buckets() {
  clear_has_buckets();
  if (buckets_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buckets_;
    buckets_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DumpFeature::set_allocated_buckets(::std::string* buckets) {
  if (buckets_ != &::google::protobuf::internal::kEmptyString) {
    delete buckets_;
  }
  if (buckets) {
    set_has_buckets();
    buckets_ = buckets;
  } else {
    clear_has_buckets();
    buckets_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string predicate_id = 7;
inline bool DumpFeature::has_predicate_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DumpFeature::set_has_predicate_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DumpFeature::clear_has_predicate_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DumpFeature::clear_predicate_id() {
  if (predicate_id_ != &::google::protobuf::internal::kEmptyString) {
    predicate_id_->clear();
  }
  clear_has_predicate_id();
}
inline const ::std::string& DumpFeature::predicate_id() const {
  return *predicate_id_;
}
inline void DumpFeature::set_predicate_id(const ::std::string& value) {
  set_has_predicate_id();
  if (predicate_id_ == &::google::protobuf::internal::kEmptyString) {
    predicate_id_ = new ::std::string;
  }
  predicate_id_->assign(value);
}
inline void DumpFeature::set_predicate_id(const char* value) {
  set_has_predicate_id();
  if (predicate_id_ == &::google::protobuf::internal::kEmptyString) {
    predicate_id_ = new ::std::string;
  }
  predicate_id_->assign(value);
}
inline void DumpFeature::set_predicate_id(const char* value, size_t size) {
  set_has_predicate_id();
  if (predicate_id_ == &::google::protobuf::internal::kEmptyString) {
    predicate_id_ = new ::std::string;
  }
  predicate_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DumpFeature::mutable_predicate_id() {
  set_has_predicate_id();
  if (predicate_id_ == &::google::protobuf::internal::kEmptyString) {
    predicate_id_ = new ::std::string;
  }
  return predicate_id_;
}
inline ::std::string* DumpFeature::release_predicate_id() {
  clear_has_predicate_id();
  if (predicate_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = predicate_id_;
    predicate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DumpFeature::set_allocated_predicate_id(::std::string* predicate_id) {
  if (predicate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete predicate_id_;
  }
  if (predicate_id) {
    set_has_predicate_id();
    predicate_id_ = predicate_id;
  } else {
    clear_has_predicate_id();
    predicate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rawlog
}  // namespace data
}  // namespace yidian

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fdump_5ffeature_2eproto__INCLUDED
