// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_dump_feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_dump_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yidian {
namespace data {
namespace rawlog {

namespace {

const ::google::protobuf::Descriptor* FeatureKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpFeature_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto() {
  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_dump_feature.proto");
  GOOGLE_CHECK(file != NULL);
  FeatureKV_descriptor_ = file->message_type(0);
  static const int FeatureKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, v_),
  };
  FeatureKV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureKV_descriptor_,
      FeatureKV::default_instance_,
      FeatureKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureKV));
  BaseFeature_descriptor_ = file->message_type(1);
  static const int BaseFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, values_),
  };
  BaseFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseFeature_descriptor_,
      BaseFeature::default_instance_,
      BaseFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseFeature));
  DocFeature_descriptor_ = file->message_type(2);
  static const int DocFeature_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, doc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, gbdtscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, features_),
  };
  DocFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocFeature_descriptor_,
      DocFeature::default_instance_,
      DocFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocFeature));
  DumpFeature_descriptor_ = file->message_type(3);
  static const int DumpFeature_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, predicate_id_),
  };
  DumpFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpFeature_descriptor_,
      DumpFeature::default_instance_,
      DumpFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpFeature));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fdump_5ffeature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureKV_descriptor_, &FeatureKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseFeature_descriptor_, &BaseFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocFeature_descriptor_, &DocFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpFeature_descriptor_, &DumpFeature::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto() {
  delete FeatureKV::default_instance_;
  delete FeatureKV_reflection_;
  delete BaseFeature::default_instance_;
  delete BaseFeature_reflection_;
  delete DocFeature::default_instance_;
  delete DocFeature_reflection_;
  delete DumpFeature::default_instance_;
  delete DumpFeature_reflection_;
}

void protobuf_AddDesc_service_5fdump_5ffeature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032service_dump_feature.proto\022\022yidian.dat"
    "a.rawlog\"!\n\tFeatureKV\022\t\n\001k\030\001 \001(\t\022\t\n\001v\030\002 "
    "\001(\001\"J\n\013BaseFeature\022\014\n\004name\030\001 \001(\t\022-\n\006valu"
    "es\030\002 \003(\0132\035.yidian.data.rawlog.FeatureKV\""
    "\230\001\n\nDocFeature\022\016\n\006doc_id\030\001 \001(\t\022\013\n\003ids\030\003 "
    "\003(\005\022\r\n\005score\030\004 \001(\001\022\r\n\005times\030\005 \001(\005\022\021\n\tgbd"
    "tscore\030\006 \001(\001\022\t\n\001y\030\007 \001(\001\0221\n\010features\030\010 \003("
    "\0132\037.yidian.data.rawlog.BaseFeature\"\227\001\n\013D"
    "umpFeature\022\017\n\007user_id\030\001 \001(\t\022,\n\004docs\030\002 \003("
    "\0132\036.yidian.data.rawlog.DocFeature\022\021\n\ttim"
    "estamp\030\003 \001(\003\022\017\n\007version\030\004 \001(\t\022\017\n\007buckets"
    "\030\005 \001(\t\022\024\n\014predicate_id\030\007 \001(\t", 468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_dump_feature.proto", &protobuf_RegisterTypes);
  FeatureKV::default_instance_ = new FeatureKV();
  BaseFeature::default_instance_ = new BaseFeature();
  DocFeature::default_instance_ = new DocFeature();
  DumpFeature::default_instance_ = new DumpFeature();
  FeatureKV::default_instance_->InitAsDefaultInstance();
  BaseFeature::default_instance_->InitAsDefaultInstance();
  DocFeature::default_instance_->InitAsDefaultInstance();
  DumpFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fdump_5ffeature_2eproto {
  StaticDescriptorInitializer_service_5fdump_5ffeature_2eproto() {
    protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  }
} static_descriptor_initializer_service_5fdump_5ffeature_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FeatureKV::kKFieldNumber;
const int FeatureKV::kVFieldNumber;
#endif  // !_MSC_VER

FeatureKV::FeatureKV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureKV::InitAsDefaultInstance() {
}

FeatureKV::FeatureKV(const FeatureKV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureKV::SharedCtor() {
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureKV::~FeatureKV() {
  SharedDtor();
}

void FeatureKV::SharedDtor() {
  if (k_ != &::google::protobuf::internal::kEmptyString) {
    delete k_;
  }
  if (this != default_instance_) {
  }
}

void FeatureKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureKV_descriptor_;
}

const FeatureKV& FeatureKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

FeatureKV* FeatureKV::default_instance_ = NULL;

FeatureKV* FeatureKV::New() const {
  return new FeatureKV;
}

void FeatureKV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::kEmptyString) {
        k_->clear();
      }
    }
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string k = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }

      // optional double v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->k(), output);
  }

  // optional double v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional double v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureKV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureKV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureKV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureKV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureKV::MergeFrom(const FeatureKV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureKV::CopyFrom(const FeatureKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureKV::IsInitialized() const {

  return true;
}

void FeatureKV::Swap(FeatureKV* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureKV_descriptor_;
  metadata.reflection = FeatureKV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseFeature::kNameFieldNumber;
const int BaseFeature::kValuesFieldNumber;
#endif  // !_MSC_VER

BaseFeature::BaseFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseFeature::InitAsDefaultInstance() {
}

BaseFeature::BaseFeature(const BaseFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseFeature::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseFeature::~BaseFeature() {
  SharedDtor();
}

void BaseFeature::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BaseFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseFeature_descriptor_;
}

const BaseFeature& BaseFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

BaseFeature* BaseFeature::default_instance_ = NULL;

BaseFeature* BaseFeature::New() const {
  return new BaseFeature;
}

void BaseFeature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .yidian.data.rawlog.FeatureKV values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseFeature::MergeFrom(const BaseFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFeature::CopyFrom(const BaseFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFeature::IsInitialized() const {

  return true;
}

void BaseFeature::Swap(BaseFeature* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseFeature_descriptor_;
  metadata.reflection = BaseFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocFeature::kDocIdFieldNumber;
const int DocFeature::kIdsFieldNumber;
const int DocFeature::kScoreFieldNumber;
const int DocFeature::kTimesFieldNumber;
const int DocFeature::kGbdtscoreFieldNumber;
const int DocFeature::kYFieldNumber;
const int DocFeature::kFeaturesFieldNumber;
#endif  // !_MSC_VER

DocFeature::DocFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocFeature::InitAsDefaultInstance() {
}

DocFeature::DocFeature(const DocFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocFeature::SharedCtor() {
  _cached_size_ = 0;
  doc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  times_ = 0;
  gbdtscore_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocFeature::~DocFeature() {
  SharedDtor();
}

void DocFeature::SharedDtor() {
  if (doc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_id_;
  }
  if (this != default_instance_) {
  }
}

void DocFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocFeature_descriptor_;
}

const DocFeature& DocFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

DocFeature* DocFeature::default_instance_ = NULL;

DocFeature* DocFeature::New() const {
  return new DocFeature;
}

void DocFeature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_doc_id()) {
      if (doc_id_ != &::google::protobuf::internal::kEmptyString) {
        doc_id_->clear();
      }
    }
    score_ = 0;
    times_ = 0;
    gbdtscore_ = 0;
    y_ = 0;
  }
  ids_.Clear();
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string doc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_id().data(), this->doc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        if (input->ExpectTag(33)) goto parse_score;
        break;
      }

      // optional double score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional int32 times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_gbdtscore;
        break;
      }

      // optional double gbdtscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gbdtscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gbdtscore_)));
          set_has_gbdtscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_y;
        break;
      }

      // optional double y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_features;
        break;
      }

      // repeated .yidian.data.rawlog.BaseFeature features = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string doc_id = 1;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->doc_id(), output);
  }

  // repeated int32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ids(i), output);
  }

  // optional double score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->score(), output);
  }

  // optional int32 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times(), output);
  }

  // optional double gbdtscore = 6;
  if (has_gbdtscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gbdtscore(), output);
  }

  // optional double y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->y(), output);
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->features(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string doc_id = 1;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->doc_id(), target);
  }

  // repeated int32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ids(i), target);
  }

  // optional double score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->score(), target);
  }

  // optional int32 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->times(), target);
  }

  // optional double gbdtscore = 6;
  if (has_gbdtscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gbdtscore(), target);
  }

  // optional double y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->y(), target);
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->features(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string doc_id = 1;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_id());
    }

    // optional double score = 4;
    if (has_score()) {
      total_size += 1 + 8;
    }

    // optional int32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional double gbdtscore = 6;
    if (has_gbdtscore()) {
      total_size += 1 + 8;
    }

    // optional double y = 7;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocFeature::MergeFrom(const DocFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doc_id()) {
      set_doc_id(from.doc_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_gbdtscore()) {
      set_gbdtscore(from.gbdtscore());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocFeature::CopyFrom(const DocFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocFeature::IsInitialized() const {

  return true;
}

void DocFeature::Swap(DocFeature* other) {
  if (other != this) {
    std::swap(doc_id_, other->doc_id_);
    ids_.Swap(&other->ids_);
    std::swap(score_, other->score_);
    std::swap(times_, other->times_);
    std::swap(gbdtscore_, other->gbdtscore_);
    std::swap(y_, other->y_);
    features_.Swap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocFeature_descriptor_;
  metadata.reflection = DocFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DumpFeature::kUserIdFieldNumber;
const int DumpFeature::kDocsFieldNumber;
const int DumpFeature::kTimestampFieldNumber;
const int DumpFeature::kVersionFieldNumber;
const int DumpFeature::kBucketsFieldNumber;
const int DumpFeature::kPredicateIdFieldNumber;
#endif  // !_MSC_VER

DumpFeature::DumpFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DumpFeature::InitAsDefaultInstance() {
}

DumpFeature::DumpFeature(const DumpFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DumpFeature::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buckets_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  predicate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpFeature::~DumpFeature() {
  SharedDtor();
}

void DumpFeature::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (buckets_ != &::google::protobuf::internal::kEmptyString) {
    delete buckets_;
  }
  if (predicate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete predicate_id_;
  }
  if (this != default_instance_) {
  }
}

void DumpFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpFeature_descriptor_;
}

const DumpFeature& DumpFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

DumpFeature* DumpFeature::default_instance_ = NULL;

DumpFeature* DumpFeature::New() const {
  return new DumpFeature;
}

void DumpFeature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_buckets()) {
      if (buckets_ != &::google::protobuf::internal::kEmptyString) {
        buckets_->clear();
      }
    }
    if (has_predicate_id()) {
      if (predicate_id_ != &::google::protobuf::internal::kEmptyString) {
        predicate_id_->clear();
      }
    }
  }
  docs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_docs;
        break;
      }

      // repeated .yidian.data.rawlog.DocFeature docs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_docs;
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buckets;
        break;
      }

      // optional string buckets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buckets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buckets().data(), this->buckets().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_predicate_id;
        break;
      }

      // optional string predicate_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predicate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predicate_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predicate_id().data(), this->predicate_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DumpFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->docs(i), output);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

  // optional string buckets = 5;
  if (has_buckets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buckets().data(), this->buckets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->buckets(), output);
  }

  // optional string predicate_id = 7;
  if (has_predicate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicate_id().data(), this->predicate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->predicate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DumpFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->docs(i), target);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // optional string buckets = 5;
  if (has_buckets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buckets().data(), this->buckets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buckets(), target);
  }

  // optional string predicate_id = 7;
  if (has_predicate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicate_id().data(), this->predicate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predicate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DumpFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string buckets = 5;
    if (has_buckets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buckets());
    }

    // optional string predicate_id = 7;
    if (has_predicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predicate_id());
    }

  }
  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpFeature::MergeFrom(const DumpFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  docs_.MergeFrom(from.docs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_buckets()) {
      set_buckets(from.buckets());
    }
    if (from.has_predicate_id()) {
      set_predicate_id(from.predicate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpFeature::CopyFrom(const DumpFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpFeature::IsInitialized() const {

  return true;
}

void DumpFeature::Swap(DumpFeature* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    docs_.Swap(&other->docs_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(version_, other->version_);
    std::swap(buckets_, other->buckets_);
    std::swap(predicate_id_, other->predicate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpFeature_descriptor_;
  metadata.reflection = DumpFeature_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rawlog
}  // namespace data
}  // namespace yidian

// @@protoc_insertion_point(global_scope)
